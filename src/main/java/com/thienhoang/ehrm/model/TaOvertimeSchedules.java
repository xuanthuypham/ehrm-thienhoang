package com.thienhoang.ehrm.model;
// Generated Apr 22, 2018 7:20:49 PM by Hibernate Tools 4.3.5.Final

import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * TaOvertimeSchedules generated by hbm2java
 */
@Entity
@Table(name = "TA_OVERTIME_SCHEDULES", catalog = "eHRM_JavaResearching")
public class TaOvertimeSchedules implements java.io.Serializable {

	private Integer overtimeScheduleId;
	private Employees employeesByEmployeeIdEdited;
	private Employees employeesByEmployeeId;
	private Employees employeesByEmployeeIdCreated;
	private MasterDatas masterDatas;
	private OvertimeTypes overtimeTypes;
	private TaWorkingShifts taWorkingShifts;
	private double overtimeHours;
	private Date workingScheduleDate;
	private Boolean locked;
	private Serializable remark;
	private Date dateCreated;
	private Date dateEdited;
	private Integer countAprove;
	private Serializable commentRejected;
	private Date workingStart;
	private Date workingEnd;
	private Date timeoutActual;
	private Integer minuteDhapprove;
	private Integer minuteActual;
	private Set<TaOvertimeSchedulesHistories> taOvertimeSchedulesHistorieses = new HashSet<TaOvertimeSchedulesHistories>(
			0);
	private Set<OutBreakOvertime> outBreakOvertimes = new HashSet<OutBreakOvertime>(0);

	public TaOvertimeSchedules() {
	}

	public TaOvertimeSchedules(Employees employeesByEmployeeId, OvertimeTypes overtimeTypes, double overtimeHours,
			Date workingStart, Date workingEnd) {
		this.employeesByEmployeeId = employeesByEmployeeId;
		this.overtimeTypes = overtimeTypes;
		this.overtimeHours = overtimeHours;
		this.workingStart = workingStart;
		this.workingEnd = workingEnd;
	}

	public TaOvertimeSchedules(Employees employeesByEmployeeIdEdited, Employees employeesByEmployeeId,
			Employees employeesByEmployeeIdCreated, MasterDatas masterDatas, OvertimeTypes overtimeTypes,
			TaWorkingShifts taWorkingShifts, double overtimeHours, Date workingScheduleDate, Boolean locked,
			Serializable remark, Date dateCreated, Date dateEdited, Integer countAprove, Serializable commentRejected,
			Date workingStart, Date workingEnd, Date timeoutActual, Integer minuteDhapprove, Integer minuteActual,
			Set<TaOvertimeSchedulesHistories> taOvertimeSchedulesHistorieses, Set<OutBreakOvertime> outBreakOvertimes) {
		this.employeesByEmployeeIdEdited = employeesByEmployeeIdEdited;
		this.employeesByEmployeeId = employeesByEmployeeId;
		this.employeesByEmployeeIdCreated = employeesByEmployeeIdCreated;
		this.masterDatas = masterDatas;
		this.overtimeTypes = overtimeTypes;
		this.taWorkingShifts = taWorkingShifts;
		this.overtimeHours = overtimeHours;
		this.workingScheduleDate = workingScheduleDate;
		this.locked = locked;
		this.remark = remark;
		this.dateCreated = dateCreated;
		this.dateEdited = dateEdited;
		this.countAprove = countAprove;
		this.commentRejected = commentRejected;
		this.workingStart = workingStart;
		this.workingEnd = workingEnd;
		this.timeoutActual = timeoutActual;
		this.minuteDhapprove = minuteDhapprove;
		this.minuteActual = minuteActual;
		this.taOvertimeSchedulesHistorieses = taOvertimeSchedulesHistorieses;
		this.outBreakOvertimes = outBreakOvertimes;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "OVERTIME_SCHEDULE_ID", unique = true, nullable = false)
	public Integer getOvertimeScheduleId() {
		return this.overtimeScheduleId;
	}

	public void setOvertimeScheduleId(Integer overtimeScheduleId) {
		this.overtimeScheduleId = overtimeScheduleId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "EMPLOYEE_ID_EDITED")
	public Employees getEmployeesByEmployeeIdEdited() {
		return this.employeesByEmployeeIdEdited;
	}

	public void setEmployeesByEmployeeIdEdited(Employees employeesByEmployeeIdEdited) {
		this.employeesByEmployeeIdEdited = employeesByEmployeeIdEdited;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "EMPLOYEE_ID", nullable = false)
	public Employees getEmployeesByEmployeeId() {
		return this.employeesByEmployeeId;
	}

	public void setEmployeesByEmployeeId(Employees employeesByEmployeeId) {
		this.employeesByEmployeeId = employeesByEmployeeId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "EMPLOYEE_ID_CREATED")
	public Employees getEmployeesByEmployeeIdCreated() {
		return this.employeesByEmployeeIdCreated;
	}

	public void setEmployeesByEmployeeIdCreated(Employees employeesByEmployeeIdCreated) {
		this.employeesByEmployeeIdCreated = employeesByEmployeeIdCreated;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "STATUS")
	public MasterDatas getMasterDatas() {
		return this.masterDatas;
	}

	public void setMasterDatas(MasterDatas masterDatas) {
		this.masterDatas = masterDatas;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "OVERTIME_TYPE_ID", nullable = false)
	public OvertimeTypes getOvertimeTypes() {
		return this.overtimeTypes;
	}

	public void setOvertimeTypes(OvertimeTypes overtimeTypes) {
		this.overtimeTypes = overtimeTypes;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "SCHEDULED_SHIFT_ID")
	public TaWorkingShifts getTaWorkingShifts() {
		return this.taWorkingShifts;
	}

	public void setTaWorkingShifts(TaWorkingShifts taWorkingShifts) {
		this.taWorkingShifts = taWorkingShifts;
	}

	@Column(name = "OVERTIME_HOURS", nullable = false, precision = 53, scale = 0)
	public double getOvertimeHours() {
		return this.overtimeHours;
	}

	public void setOvertimeHours(double overtimeHours) {
		this.overtimeHours = overtimeHours;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "WORKING_SCHEDULE_DATE", length = 10)
	public Date getWorkingScheduleDate() {
		return this.workingScheduleDate;
	}

	public void setWorkingScheduleDate(Date workingScheduleDate) {
		this.workingScheduleDate = workingScheduleDate;
	}

	@Column(name = "LOCKED")
	public Boolean getLocked() {
		return this.locked;
	}

	public void setLocked(Boolean locked) {
		this.locked = locked;
	}

	@Column(name = "REMARK")
	public Serializable getRemark() {
		return this.remark;
	}

	public void setRemark(Serializable remark) {
		this.remark = remark;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DATE_CREATED", length = 23)
	public Date getDateCreated() {
		return this.dateCreated;
	}

	public void setDateCreated(Date dateCreated) {
		this.dateCreated = dateCreated;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DATE_EDITED", length = 23)
	public Date getDateEdited() {
		return this.dateEdited;
	}

	public void setDateEdited(Date dateEdited) {
		this.dateEdited = dateEdited;
	}

	@Column(name = "COUNT_APROVE")
	public Integer getCountAprove() {
		return this.countAprove;
	}

	public void setCountAprove(Integer countAprove) {
		this.countAprove = countAprove;
	}

	@Column(name = "COMMENT_REJECTED")
	public Serializable getCommentRejected() {
		return this.commentRejected;
	}

	public void setCommentRejected(Serializable commentRejected) {
		this.commentRejected = commentRejected;
	}

	@Temporal(TemporalType.TIME)
	@Column(name = "WORKING_START", nullable = false, length = 16)
	public Date getWorkingStart() {
		return this.workingStart;
	}

	public void setWorkingStart(Date workingStart) {
		this.workingStart = workingStart;
	}

	@Temporal(TemporalType.TIME)
	@Column(name = "WORKING_END", nullable = false, length = 16)
	public Date getWorkingEnd() {
		return this.workingEnd;
	}

	public void setWorkingEnd(Date workingEnd) {
		this.workingEnd = workingEnd;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "TIMEOUT_ACTUAL", length = 23)
	public Date getTimeoutActual() {
		return this.timeoutActual;
	}

	public void setTimeoutActual(Date timeoutActual) {
		this.timeoutActual = timeoutActual;
	}

	@Column(name = "MINUTE_DHAPPROVE")
	public Integer getMinuteDhapprove() {
		return this.minuteDhapprove;
	}

	public void setMinuteDhapprove(Integer minuteDhapprove) {
		this.minuteDhapprove = minuteDhapprove;
	}

	@Column(name = "MINUTE_ACTUAL")
	public Integer getMinuteActual() {
		return this.minuteActual;
	}

	public void setMinuteActual(Integer minuteActual) {
		this.minuteActual = minuteActual;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "taOvertimeSchedules")
	public Set<TaOvertimeSchedulesHistories> getTaOvertimeSchedulesHistorieses() {
		return this.taOvertimeSchedulesHistorieses;
	}

	public void setTaOvertimeSchedulesHistorieses(Set<TaOvertimeSchedulesHistories> taOvertimeSchedulesHistorieses) {
		this.taOvertimeSchedulesHistorieses = taOvertimeSchedulesHistorieses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "taOvertimeSchedules")
	public Set<OutBreakOvertime> getOutBreakOvertimes() {
		return this.outBreakOvertimes;
	}

	public void setOutBreakOvertimes(Set<OutBreakOvertime> outBreakOvertimes) {
		this.outBreakOvertimes = outBreakOvertimes;
	}

}
